var documenterSearchIndex = {"docs":
[{"location":"api/#Function-References","page":"Public API","title":"Function References","text":"","category":"section"},{"location":"api/#Configuration-Types","page":"Public API","title":"Configuration Types","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"WarpConfig\nAxisSearchConfig\nKNNConfig","category":"page"},{"location":"api/#SpatialGSP.WarpConfig","page":"Public API","title":"SpatialGSP.WarpConfig","text":"@kwdef struct WarpConfig{T <: AbstractFloat}\n    N_bands::Int = 20\n    λ_max::T = 2.0 # in (0, 2]\n    iterate_threshold::T = convert(T, 10)\n    discount_factor::T = convert(T, 0.5)\n    max_iters::Int = 10\n    aggregate_option::Symbol = :sum_normalized\n    verbose::Bool = false\nend\n\naggregate_option can be :sum_normalized or :sum\n\n\n\n\n\n","category":"type"},{"location":"api/#SpatialGSP.AxisSearchConfig","page":"Public API","title":"SpatialGSP.AxisSearchConfig","text":"@kwdef struct AxisSearchConfig{T <: AbstractFloat} <: GraphConstructionConfig\n    kernel_σ_multiplier::T = convert(T, 3)\n    make_undirected::Bool = true\n    remove_null_nbs::Bool = true\n    w_lb::T = convert(T, 0.1)\nend\n\nIf remove_null_nbs is set to false, you can infer which neighbors came from which axis direction from the generated graph.\n\n\n\n\n\n","category":"type"},{"location":"api/#SpatialGSP.KNNConfig","page":"Public API","title":"SpatialGSP.KNNConfig","text":"@kwdef struct KNNConfig{T <: AbstractFloat} <: GraphConstructionConfig\n    single_distance::Bool = false\n    atol::T = convert(T, 1e-3)\n    normalize_min_weight::Bool = false\n    make_symmetric::Bool = true\n    k::Int = 4\n    kernel_gain = convert(T, Inf)\n    kernel_σ² = convert(T, Inf)\nend\n\nIf normalize_min_wieght is false, then the minimum weight is 1.\n\n\n\n\n\n","category":"type"},{"location":"api/#Graph-construction","page":"Public API","title":"Graph construction","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"create_axis_graph","category":"page"},{"location":"api/#SpatialGSP.create_axis_graph","page":"Public API","title":"SpatialGSP.create_axis_graph","text":"create_axis_graph(\n    config::AxisSearchConfig{T},\n    X::Vector{AV},\n) where {T, AV <: AbstractVector{T}}\n\nConstructs an undirected graph via the axis-search algorithm.\n\n\n\n\n\n","category":"function"},{"location":"api/#Warp-sample-construction","page":"Public API","title":"Warp sample construction","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"get_grid_warp_samples\nget_knn_warp_samples\nget_warp_samples","category":"page"},{"location":"api/#SpatialGSP.get_grid_warp_samples","page":"Public API","title":"SpatialGSP.get_grid_warp_samples","text":"get_grid_warp_samples(\n    x_nD::AbstractArray{T},\n    config::WarpConfig,\n) where T <: Real\n\nReturns:\n\nW, an array of the same size as x_nD that contains the warp samples.\nG, the unit graph associated with x_nD.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpatialGSP.get_knn_warp_samples","page":"Public API","title":"SpatialGSP.get_knn_warp_samples","text":"get_knn_warp_samples(\n    X::AbstractVector,\n    y::AbstractVector{T},\n    config::WarpConfig,\n    knn_config::KNNConfig;\n    check_finite::Bool = true,\n) where T <: Real\n\nTo get an undirected G output, make sure knn_config.make_symmetric is true.\n\nReturns:\n\nW, warp samples for dataset (X,y).\nG, the k-nearest neighbors graph for the dataset.\n\n\n\n\n\n","category":"function"},{"location":"api/#SpatialGSP.get_warp_samples","page":"Public API","title":"SpatialGSP.get_warp_samples","text":"get_warp_samples(\n    x::Vector{T},\n    TL::Union{Matrix, SparseMatrixCSC},\n    config::WarpConfig,\n) where T <: AbstractFloat\n\nTL is the fundamental one-hop operator. One choice is the random-walk Laplacian of a graph.\n\nx is the graph signal from which we derive the warp samples from.\n\nReturns:\n\nW, warp samples for dataset (X,y).\n\n\n\n\n\n","category":"function"},{"location":"api/#Graph-matrices","page":"Public API","title":"Graph matrices","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"create_adjacency\ncreate_rwlaplacian\ncreate_snlaplacian\ncreate_degree\ncreate_laplacian","category":"page"},{"location":"api/#SpatialGSP.create_adjacency","page":"Public API","title":"SpatialGSP.create_adjacency","text":"create_adjacency(g::UnitGrid)\n\nReturns the adjacency matrix of g.\n\n\n\n\n\ncreate_adjacency(g::UndirectedGraph)\n\n\n\n\n\n","category":"function"},{"location":"api/#SpatialGSP.create_rwlaplacian","page":"Public API","title":"SpatialGSP.create_rwlaplacian","text":"create_rwlaplacian(::Type{T}, g::UnitGrid) where T\n\nReturns the random-walk Laplacian of a unit grid graph, with scalar data type T.\n\n\n\n\n\ncreate_rwlaplacian(g::UndirectedGraph)\n\n\n\n\n\n","category":"function"},{"location":"api/#SpatialGSP.create_snlaplacian","page":"Public API","title":"SpatialGSP.create_snlaplacian","text":"create_snlaplacian(::Type{T}, g::UnitGrid) where T\n\nReturns the symmetric normalized Laplacian of a unit grid graph, with scalar data type T.\n\n\n\n\n\ncreate_snlaplacian(g::UndirectedGraph)\n\n\n\n\n\n","category":"function"},{"location":"api/#SpatialGSP.create_degree","page":"Public API","title":"SpatialGSP.create_degree","text":"create_degree(g::UndirectedGraph)\n\nReturns the degree matrix of graph g.\n\n\n\n\n\ncreate_degree(g::UndirectedGraph)\n\n\n\n\n\n","category":"function"},{"location":"api/#SpatialGSP.create_laplacian","page":"Public API","title":"SpatialGSP.create_laplacian","text":"create_laplacian(g::UndirectedGraph)\n\nReturns the combinatorial Laplacian of g.\n\n\n\n\n\n","category":"function"},{"location":"api/#Utilities","page":"Public API","title":"Utilities","text":"","category":"section"},{"location":"api/","page":"Public API","title":"Public API","text":"convertcompactdomain","category":"page"},{"location":"api/#SpatialGSP.convertcompactdomain","page":"Public API","title":"SpatialGSP.convertcompactdomain","text":"convertcompactdomain(x::T, a::T, b::T, c::T, d::T)::T\n\nconverts compact domain x ∈ [a,b] to compact domain out ∈ [c,d].\n\n\n\n\n\n","category":"function"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"EditURL = \"../../../examples/axis.jl\"","category":"page"},{"location":"generated/axis_lit/#Setup","page":"Demo: Axis graph","title":"Setup","text":"","category":"section"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Install dependencies","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"import Pkg\nlet\n    pkgs = [\"PlotlyLight\", \"ColorSchemes\", \"VisualizationBag\", \"SpatialGSP\"]\n    for pkg in pkgs\n        if Base.find_package(pkg) === nothing\n            Pkg.add(pkg)\n        end\n    end\nend;","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Load packages.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"using LinearAlgebra\n\nimport PlotlyLight as PLY\nimport ColorSchemes\n\nimport VisualizationBag as VIZ\nimport SpatialGSP as GSP\n\nimport Random\nRandom.seed!(25);","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Specify floating-point data type and dimension.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"T = Float64\nD = 2;","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Scattered positions.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"N = 20\nX = collect( randn(T, D) for _ = 1:N );\n\n#uncomment this if we want to see the graph generated from a grid instead of scattered positions.\n#X0 = vec(collect( Iterators.product(-5:4,-3:6) ))\n#X = collect( convert(Vector{T}, collect(x)) for x in X0)\n#N = length(X);","category":"page"},{"location":"generated/axis_lit/#Axis-search-graph-construction","page":"Demo: Axis graph","title":"Axis search graph construction","text":"","category":"section"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"η controls the creation of edges from X. w_lb is the minimum edge weight. The other edges are weighted according to a square exponential kernel that attains w_lb for the shortest pair-wise distance in X. Larger values of η means the generated graph is more like a nearest neighbors graph. A lower value means the generated graph is more like a grid graph.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"η = convert(T, 3)\nkernel_ref = GSP.SqExp(T)\nconfig = GSP.AxisSearchConfig{T}(\n    kernel_σ_multiplier = η,\n    make_undirected = true,\n    remove_null_nbs = true,\n    w_lb = convert(T, 0.1)\n);","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Construct the graph: Nodes are the points in X.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"G = GSP.create_axis_graph(config, X);","category":"page"},{"location":"generated/axis_lit/#Visualize","page":"Demo: Axis graph","title":"Visualize","text":"","category":"section"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"width = 600 # plot width.\nheight = 600; # plot height.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Create edges","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"edge_h = GSP.getedgecoord(G, X, 1) # horizontal\nedge_v = GSP.getedgecoord(G, X, 2); # vertical","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Create a PlotlyJS trace for nodes.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"x_h = map(xx->xx[begin], X)\nx_v = map(xx->xx[begin+1], X)\nN_nbs = GSP.getNnbs(G)\n\nnodes_trace = PLY.Config(\n    name = \"Node\",\n    x = x_v,\n    y = x_h,\n    mode = \"markers\",\n    text = [\n        \"Node $n, Neighbors: $(N_nbs[n])\"\n        for n in eachindex(N_nbs)\n    ],\n    marker = PLY.Config(\n        showscale = true,\n        colorscale = ColorSchemes.viridis,\n        color = N_nbs,\n        size = 10,\n        colorbar = PLY.Config(\n            thickness = 15,\n            title = \"Node Connections\",\n            xanchor = \"left\",\n            titleside = \"right\"\n      ),\n    ),\n);","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Create the PlotlyJS layout trace.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"layout = PLY.Config(\n    width = width,\n    height = height,\n    margin = PLY.Config( # rid of white spaces around the saved plot.\n        l = 1, # measured in pixels. l for left, etc.\n        r = 1,\n        t = 1,\n        b = 1,\n    ),\n    hovermode = \"closest\",\n    title = \"Connectivity $η\",\n    titlefont = PLY.Config(\n        size = 16,\n    ),\n    showlegend = false,\n    showarrow = false,\n    xaxis = PLY.Config(\n        showgrid = false,\n        zeroline = false,\n        showticklabels = false,\n    ),\n    yaxis = PLY.Config(\n        showgrid = false,\n        zeroline = false,\n        showticklabels = false,\n    ),\n);","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Create the trace for edges and their midpoints. The implementation is in the VisualizationBag package.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"eds, mid_pts_trace = VIZ.get2Dedgetraces_variablewidth(\n    PLY, G.edges.srcs, G.edges.dests, G.edges.ws, X,\n);","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"v = vcat(eds...)\npush!(v, mid_pts_trace)\npush!(v, nodes_trace)\nph = PLY.Plot(v, layout);","category":"page"},{"location":"generated/axis_lit/#Save-plot","page":"Demo: Axis graph","title":"Save plot","text":"","category":"section"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"#Uncomment to save as HTML.\n#PLY.save(ph, \"output/axis_graph_$(η).html\")\n\nimport PlotlyKaleido\nPlotlyKaleido.start()","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"Pause the current Julia session until we save the image.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"t = @task begin\n    (;data, layout, config) = ph\n    PlotlyKaleido.savefig(\n        ph,\n        \"axis_lit.svg\";\n        width = width,\n        height = height,\n    )\nend\nschedule(t)\nwait(t);","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"(Image: Constructed graph.)","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"The node colors correspond to the number of connections, and the thickness of an edge is proportional to the edge weight.","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"","category":"page"},{"location":"generated/axis_lit/","page":"Demo: Axis graph","title":"Demo: Axis graph","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"EditURL = \"../../../examples/bernstein_filtering.jl\"","category":"page"},{"location":"generated/bernstein_filtering_lit/#Setup","page":"Demo: Bernstein filtering","title":"Setup","text":"","category":"section"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Install dependencies","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"import Pkg\nlet\n    pkgs = [\"PythonPlot\", \"VisualizationBag\", \"Images\", \"SpatialGSP\"]\n    for pkg in pkgs\n        if Base.find_package(pkg) === nothing\n            Pkg.add(pkg)\n        end\n    end\nend;","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Load packages.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"using LinearAlgebra\nusing SparseArrays\n\nimport PythonPlot\nconst PLT = PythonPlot\n\nimport VisualizationBag as VIZ\nimport Images\n\nimport SpatialGSP as GSP\nconst Graphs = GSP.Graphs\nconst NN = GSP.NN\nconst Distances = GSP.Distances\n\nimport Random\nRandom.seed!(25);\n\n#Helper routines\ninclude(\"helpers/viz/misc.jl\")\ninclude(\"helpers/image.jl\");\n\n#Reset plot figures.\nfig_num = 1\nPLT.close(\"all\");\n\n#Specify floating-point data type and dimension.\nT = Float64\nD = 2;","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"    CondaPkg Found dependencies: /home/roy/.julia/packages/PythonCall/F4kmJ/CondaPkg.toml\n    CondaPkg Found dependencies: /home/roy/.julia/packages/PythonPlot/KcWMF/CondaPkg.toml\n    CondaPkg Dependencies already up to date\n","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Load image data","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"img = loadkodakimage(T, \"./data/kodim23.png\"; discard_pixels = 1)\nx_nD, x_ranges = image2samples(img)\nsz_x = size(x_nD);","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Treat the grid-based data x_nD as a signal on a grid graph. Get the 1-hop neighbors:","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"nbs = GSP.getgridnbs(size(x_nD))\nx = vec(x_nD);","category":"page"},{"location":"generated/bernstein_filtering_lit/#visualize-graph-signal.","page":"Demo: Bernstein filtering","title":"visualize graph signal.","text":"","category":"section"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    x_nD,\n    [],\n    \"x\",\n    fig_num,\n    \"original image, x\";\n    cmap = \"Greys_r\",\n    matrix_mode = true\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/#Graph-Laplacian","page":"Demo: Bernstein filtering","title":"Graph Laplacian","text":"","category":"section"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"G = GSP.UnitGrid(nbs) # generate grid graph.\ngraph = GSP.getgraph(G);","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Basic one-hop operators.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"A = GSP.create_adjacency(G) # adjacency matrix\ndeg = GSP.create_degree(G) # degree matrix.\ndeg_inv = GSP.create_invdegree(T, G)\nL = GSP.create_laplacian(G); # combinatorial Laplacian matrix.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Normalized Laplacian operators..","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Ln = GSP.create_snlaplacian(T, G) # symmetric normalized Laplacian matrix.\nTL = GSP.create_rwlaplacian(T, G); # random-walk Laplacian matrix.","category":"page"},{"location":"generated/bernstein_filtering_lit/#Visualize-the-action-of-each-operator","page":"Demo: Bernstein filtering","title":"Visualize the action of each operator","text":"","category":"section"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Ax = A*x\nAnx_pre = deg_inv*A*x\nAnx_post = A*deg_inv*x\nLx = L*x\nTx = TL*x\nLn_x = Ln*x;","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Adjacency.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(Ax, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"Ax\";\n    cmap = \"Greys_r\",\n    matrix_mode = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Normalize inflow.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(Anx_pre, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"Anx_pre\";\n    cmap = \"Greys_r\",\n    matrix_mode = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Normalize outflow.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(Anx_post, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"Anx_post\";\n    cmap = \"Greys_r\",\n    matrix_mode = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Combinatorial Laplacian.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(Lx, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"Lx\";\n    cmap = \"bwr\",\n    matrix_mode = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Symmetric normalized Laplacian.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(Ln_x, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"Ln_x\";\n    cmap = \"bwr\",\n    matrix_mode = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Random-walk Laplacian.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(Tx, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"Tx\";\n    cmap = \"bwr\",\n    matrix_mode = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/#Bernstein-filtering","page":"Demo: Bernstein filtering","title":"Bernstein filtering","text":"","category":"section"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"tuning parameters.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"discount_factor = 0.5\nN_bands = 20\nBernstein_degree = N_bands -1;","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"computewarpsamplesiterated() operates under the assumption that the eigenvalues of L_map is in [0,λ_max].","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"λ_max = convert(T, 2)\nL_map = TL; # set to random-walk Laplacian.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Visualize the Berinstein polynomial basis.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = visualizebernsteinbasis(\n    λ_max, Bernstein_degree, fig_num;\n    show_legend = false,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Get a set of fixed-spectrum warp samples.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Ws, Rs, λs = GSP.computewarpsamplesiterated(\n    x,\n    L_map,\n    GSP.BernsteinFBConfig(N_bands = N_bands, λ_max = λ_max);\n    iterate_threshold = convert(T, 10),\n    discount_factor = discount_factor,\n    max_iters = 10,\n    verbose = false,\n);","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"visualize the original image.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"fig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(x_nD, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"the original signal: x_nD\";\n    cmap = \"gray\",\n    matrix_mode = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Visualize the sum","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"W1 = sum(Ws)\nfig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(W1, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"W1\";\n    cmap = \"bwr\",\n    matrix_mode = true,\n    symmetric_color_range = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"Visualize the normalized sum. Less noisy, thicker contours.","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"W2 = GSP.sumnormalized(Ws)\nfig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(W2, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"W2\";\n    cmap = \"bwr\",\n    matrix_mode = true,\n    symmetric_color_range = true,\n)\nPLT.gcf()","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"(Image: )","category":"page"},{"location":"generated/bernstein_filtering_lit/#Convenience-routine","page":"Demo: Bernstein filtering","title":"Convenience routine","text":"","category":"section"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"W2, G = GSP.get_grid_warp_samples(\n    x_nD,\n    GSP.WarpConfig{T}(),\n)\nfig_num = VIZ.plotmeshgrid2D(\n    PLT,\n    x_ranges,\n    reshape(W2, sz_x),\n    [],\n    \"x\",\n    fig_num,\n    \"W2\";\n    cmap = \"bwr\",\n    matrix_mode = true,\n    symmetric_color_range = true,\n)\nPLT.gcf()\n\nnothing;","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"","category":"page"},{"location":"generated/bernstein_filtering_lit/","page":"Demo: Bernstein filtering","title":"Demo: Bernstein filtering","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#SpatialGSP.jl","page":"Overview","title":"SpatialGSP.jl","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"This package implements the Bernstein filtering warp sample construction scheme in our manuscript. It also implements the Axis-search method for generating an undirected graph from a given regression dataset, given the algorithm-specific  tuning parameters.","category":"page"}]
}
